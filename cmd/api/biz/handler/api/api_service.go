// Code generated by hertz generator.

package api

import (
	"context"
	"net/http"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
	api "github.com/simple/douyin/cmd/api/biz/model/api"
	"github.com/simple/douyin/cmd/api/biz/mw"
	"github.com/simple/douyin/cmd/api/biz/rpc"
	"github.com/simple/douyin/kitex_gen/user"
	"github.com/simple/douyin/pkg/errno"
)

// DouyinUserRegister .
// @router /douyin/user/register/ [POST]
func DouyinUserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinUserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	resp := new(api.DouyinUserRegisterResponse)
	resp.UserID, err = rpc.CreateUser(context.Background(), &user.CreateUserRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// DouyinUserLogin .
// @router /douyin/user/login/ [POST]
func DouyinUserLogin(ctx context.Context, c *app.RequestContext) {
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// DouyinUserGet .
// @router /douyin/user/ [GET]
func DouyinUserGet(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), "binding err")
		return
	}
	// fmt.Println(req.UserID)
	// v, _ := c.Get(constants.IdentityKey)
	// fmt.Println(v)
	user, err := rpc.MGetUser(context.Background(), &user.MGetUserRequest{
		UserId: req.UserID,
		// UserId: 4,
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), "return err")
		return
	}
	c.JSON(http.StatusOK, utils.H{
		"status_code": errno.Success.ErrCode,
		"status_msg":  errno.Success.ErrMsg,
		"user":        user,
	})
}
