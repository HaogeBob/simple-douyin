// Code generated by hertz generator.

package api

import (
	"context"
	"net/http"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	api "github.com/simple/douyin/cmd/api/biz/model/api"
	"github.com/simple/douyin/cmd/api/biz/mw"
	"github.com/simple/douyin/cmd/api/biz/rpc"
	"github.com/simple/douyin/kitex_gen/user"
	"github.com/simple/douyin/pkg/errno"

	"context"
	"strconv"
	"unicode/utf8"

	"github.com/gin-gonic/gin"
	"github.com/simple/douyin/cmd/api/rpc"
	"github.com/simple/douyin/kitex_gen/comment"
	"github.com/simple/douyin/pkg/constants"
	"github.com/simple/douyin/pkg/errno"
)

// Feed .
// @router /douyin/feed/ [POST]
func Feed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinFeedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.DouyinFeedResponse)

	c.JSON(consts.StatusOK, resp)
}

// DouyinUserRegister .
// @router /douyin/user/register/ [POST]
func DouyinUserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinUserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	resp := new(api.DouyinUserRegisterResponse)
	resp.UserID, err = rpc.CreateUser(context.Background(), &user.CreateUserRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// DouyinUserLogin .
// @router /douyin/user/login/ [POST]
func DouyinUserLogin(ctx context.Context, c *app.RequestContext) {
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// DouyinUserGet .
// @router /douyin/user/ [GET]
func DouyinUserGet(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), "binding err")
		return
	}
	// fmt.Println(req.UserID)
	// v, _ := c.Get(constants.IdentityKey)
	// fmt.Println(v)
	user, err := rpc.MGetUser(context.Background(), &user.MGetUserRequest{
		UserId: req.UserID,
		// UserId: 4,
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), "return err")
		return
	}
	c.JSON(http.StatusOK, utils.H{
		"status_code": errno.Success.ErrCode,
		"status_msg":  errno.Success.ErrMsg,
		"user":        user,
	})
}

// Publish .
// @router /douyin/publish/action/ [POST]
func Publish(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinPublishActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.DouyinPublishActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetPublishList .
// @router /douyin/publish/list/ [GET]
func GetPublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinPublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.DouyinPublishListResponse)

	c.JSON(consts.StatusOK, resp)
}

// Favorite .
// @router /douyin/favorite/action/ [POST]
func Favorite(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinFavoriteActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.DouyinFavoriteActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetFavoriteList .
// @router /douyin/favorite/list/ [GET]
func GetFavoriteList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinFavoriteListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.DouyinFavoriteListResponse)

	c.JSON(consts.StatusOK, resp)
}

// Comment .
// @router /douyin/comment/action/ [POST]
func Comment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinCommentActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.DouyinCommentActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetCommentList .
// @router /douyin/comment/list/  [GET]
func GetCommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinCommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.DouyinCommentListResponse)

	c.JSON(consts.StatusOK, resp)
}

// Subscribe .
// @router /douyin/relation/action/ [POST]
func Subscribe(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinRelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.DouyinRelationActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetFollowList .
// @router /douyin/relation/follow/list/ [GET]
func GetFollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinRelationFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.DouyinRelationFollowListResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetFollowerList .
// @router /douyin/relation/follower/list/ [GET]
func GetFollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinRelationFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.DouyinRelationFollowerListResponse)

	c.JSON(consts.StatusOK, resp)
}
