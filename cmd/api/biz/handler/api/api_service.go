// Code generated by hertz generator.

package api

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	api "github.com/simple/douyin/cmd/api/biz/model/api"
	"github.com/simple/douyin/cmd/api/biz/rpc"
	"github.com/simple/douyin/cmd/publish/util"
	"github.com/simple/douyin/kitex_gen/publish"
	"github.com/simple/douyin/pkg/constants"
	"github.com/simple/douyin/pkg/errno"
	"github.com/simple/douyin/pkg/jwt"
)

// DouyinPublishAction .
// @router /douyin/publish/action/ [POST]
func DouyinPublishAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinPublishActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}

	resp := new(api.DouyinPublishActionResponse)

	Jwt := jwt.NewJWT([]byte(constants.SecretKey))
	currentId, _ := Jwt.CheckToken(req.Token)
	if currentId <= 0 {
		SendResponse(c, errno.ParamErr, nil)
		return
	}

	file, err := c.FormFile("data")
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	path := "./static/" + file.Filename
	err = c.SaveUploadedFile(file, path)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}

	err = rpc.PublishAction(context.Background(), &publish.PublishActionRequest{
		UserId:   currentId,
		Title:    req.Title,
		PlayUrl:  util.GetFileUrl(path),
		CoverUrl: util.GetFileUrl(path),
	})

	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// DouyinPublishList .
// @router /douyin/publish/list/ [POST]
func DouyinPublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinPublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	Jwt := jwt.NewJWT([]byte(constants.SecretKey))
	currentId, _ := Jwt.CheckToken(req.Token)
	if currentId <= 0 {
		SendResponse(c, errno.ParamErr, nil)
		return
	}

	video_list, err := rpc.PublishList(context.Background(), &publish.PublishListRequest{
		UserId:    req.UserID,
		NowUserId: currentId,
	})

	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	c.JSON(consts.StatusOK, utils.H{
		"status_code": errno.Success.ErrCode,
		"status_msg":  errno.Success.ErrMsg,
		"video_list":  video_list,
	})
}
